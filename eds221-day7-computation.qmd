---
title: "computation"
format: html
editor: visual
---

## 

```{r}
library(tidyverse)
library(palmerpenguins)
library(dplyr)
library(stringr)
```

## Data Wrangling Refresher

1.  Starting from penguins, write a single piped sequence in which you:
    1.  ONLY include penguins at dream and biscoe islands
    2.  remove the year and sex variables
    3.  add a new column body_mass_kg with penguin mass converted from g to kg
    4.  rename the island variable to location

```{r}
penguins_sub <- penguins %>% filter(island== "Dream" | island == "Bisoce") %>%                 select(-c("year","sex")) %>% 
  mutate(body_mass_kg = body_mass_g/1000) %>% 
  rename(location = island)
```

2.  Starting from penguins, write a single piped seuqnce to:

-   limit to adlie penguins

-   remove obs where flipper lenghth is NA

-   group by sex

-   create summary table that contains mean, sd, sample size of flipper length for male and female adlie peguins

```{r}
penguins_sub2 <- penguins %>% filter(species == "Adelie") %>% 
  drop_na(flipper_length_mm) %>% 
  group_by(sex) %>% 
  summarize(mean = mean(flipper_length_mm),
            std_dev = sd(flipper_length_mm),
            sample_size = n())

penguins %>% count(species,island, sex)
```

```{r}
animals<- data.frame(
  stringsAsFactors = FALSE,
          location = c("lagoon", "bluff", "creek", "oaks", "bluff"),
           species = c("bobcat", "coyote", "fox", "squirrel", "bobcat"),
          maturity = c("adult", "juvenile", "adult", "juvenile", "adult")
)
```

```{r}
sites<- data.frame(
  stringsAsFactors = FALSE,
          location = c("beach", "lagoon", "bluff", "oaks"),
    full_site_name = c("Goleta Beach","UCSB Lagoon",
                       "Ellwood Mesa","Fremont Campground"),
      jurisdiction = c("SB City", "UCSB", "SB City", "USFS")
)
```

Full Join: Uses full_join()

```{r}
full_join_example <- full_join(animals,sites)
```

```{r}
left_join_example<- left_join(animals,sites)
```

```{r}
inner_join_example <- inner_join(animals,sites)
```

## Dates

mdy: if data is in month-day-year

dmy: day-month-year

```{r}
my_date_1 <-lubridate::mdy("03-08-1998")
my_date_1
class(my_date_1)


my_Date_2 <-lubridate::mdy("03/08/1998")
class(my_Date_2)


my_date_3 <- lubridate::dmy("08-Jun-1974")
my_date_3

my_date_4 <- lubridate::ymd("19740325")
my_date_4


```

Can we break the lubridate parsing functions?

```{r}
time_1 <- lubridate::ymd_hm("2020-08-12 11:18")
time_1

```

Parse June 2,1982 at 4 pm utc as a date in R

```{r}
time_2 <- lubridate::ymd_hm("1982-06-02 16:00")
time_2
```

```{r}
lubridate::with_tz(time_2, "America/Los_Angeles")
```

```{r}
now<- lubridate::with_tz(Sys.time(), "Europe/Belgrade")
now
```

Access different parts of date - times

```{r}
lubridate::week("2023-04-07")

```

```{r}
urchin_counts <- data.frame(
  date= c("Oct 12, 2004","October 18,2007","Feb 12, 2003", "Feb 14, 2008"),
  species = c("purple","red","red","red"),
  size_mm= c(19,24,18,11)
  )

class(urchin_counts$date)
```

```{r}
urchin_mean_by_month <- urchin_counts %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  mutate(month = lubridate::month(date)) %>% 
  group_by(month) %>% 
  summarize(mean_size = mean(size_mm))


```

##### Add a new column month that only contains the month number from date( seen above)

Stringr with string

use str_detect to detect a string pattern

```{r}
my_string<- "Nori loves salmon and toys and Chris."
str_detect(my_string, pattern = "Chris")
```

```{r}
my_string2<-c("burrito","fish taco", "taco salad", "super-burrito")
str_detect(my_string2, pattern = "taco")
```

```{r}
starwars %>% 
  filter(str_detect(name, pattern= "Skywalker"))
```

```{r}
star2<- starwars %>% 
  mutate(name_new = str_replace(name, pattern = "Sky", replacement = "Fire"))
star2
```

str trim to get rid of leading and trailing white space

str squish to get rid of leading and trailing white space AND excess interior whitespace

```{r}
my_string3<- "    Hi my name  is Annie   !!!"

```

```{r}
str_trim(my_string3)
str_squish(my_string3)
```

```{r}
str_to_lower(my_string3)
str_to_upper(my_string3)
str_to_title(my_string3)
str_to_sentence(my_string3)
```

```{r}
starwars %>% 
  mutate(species_lower = str_to_lower(species))
```
